@import url("https://fonts.googleapis.com/css?family=Lato:300,400,700&display=swap");
@font-face {
  font-family: 'icomoon';
  src: url("/assets/fonts/icomoon.eot?48tw67");
  src: url("/assets/fonts/icomoon.eot?48tw67#iefix") format("embedded-opentype"), url("/assets/fonts/icomoon.ttf?48tw67") format("truetype"), url("/assets/fonts/icomoon.woff?48tw67") format("woff"), url("/assets/fonts/icomoon.svg?48tw67#icomoon") format("svg");
  font-weight: normal;
  font-style: normal;
  font-display: block; }

[class^='icon-'], [class*=' icon-'] {
  /* use !important to prevent issues with browser extensions that change fonts */
  font-family: 'icomoon' !important;
  speak: none;
  font-style: normal;
  font-weight: normal;
  font-variant: normal;
  text-transform: none;
  line-height: 1;
  /* Better Font Rendering =========== */
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale; }

.icon-history::before {
  content: "\e900"; }

.icon-standings::before {
  content: "\e901"; }

.icon-logout::before {
  content: "\e902"; }

.icon-login::before {
  content: "\e904"; }

.icon-plus::before {
  content: "\e905"; }

.icon-register::before {
  content: "\e903"; }

/**
 * Helpers: Functions
 * -----------------------------------------------------------------------------
 * Reusuable scss functions to used to build more extensible scss mixins.
 *
 */
/**
 * Returns the transition properties in the correct format
 * This function is used by @mixin transition($transitions...)
 */
/* @keyframes duration | timing-function | delay |
   iteration-count | direction | fill-mode | play-state | name

EG: animation: 3s ease-in 1s 2 reverse both paused slidein; */
/* WRAP */
/* ELLIP */
/**
 * Outputs list of transition properties.
 *
 * Accepts:
 * - $transitions: {String} List of transition properties to set
 *
 * Usage:
 * .selector {
 *   @include transition(width, height 0.5s ease-in);
 * }
 */
/* BREAK POINTS */
/* -- min-width by default
   -- if 2nd parameter is 'max-width', max-width used instead
   -- if $until is added, $point becomes min-width and $until is max-width */
/* LIST MARGINS */
/* CALC */
/* FLEXBOX */
/* ------------------------------------------------------
 * FLEXBOX MIXIN
 * ------------------------------------------------------
 * @desc  Let's you create flexbox container and item css with 2 mixins

 * @usage
 *
 *    @include flexbox-container(
 *
 *        $display : flex,        [flex / inline]
 *        $direction : row,       [row / row-reverse / column / column-reverse]
 *        $wrap : nowrap,         [nowrap / wrap / wrap-reverse]
 *        $justify : start,       [start / end / center / between / around]
 *        $alignContent : start,  [start / end / center / between / around / stretch]
 *        $alignItems : center     [start / end / center / baseline / stretch]
 *
 *    );
 *
 *
 *    @include flexbox-item(
 *
 *        $order : null,          [integer] -- custom order of items
 *        $grow : 0,              [0 / 1]
 *        $shrink : 1,            [0 / 1]
 *        $basis : auto,          [auto / <length>]
 *        $alignSelf : auto       [auto / start / end / center / baseline / stretch]
 *
 *    );
 *
 * @author maxoys45
 * @version 0.1
 * ------------------------------------------------------ */
/* HARDWARE ACCEL */
/* CENTRED CONTENT */
/* TARGET IE10+ */
/* BG IMAGE SVG WITH PNG FALLBACK */
/* ANIMATED PNG */
/* Mixin to replicate an animated GIF using Keyframes and a PNG Sprite image.

	$numberOfSteps 	= the number of frames to step between (no limit to number of steps)
	$animName 		= purely used as the animation name to avoid duplicate animations
	$imageSize 		= the width or height of the PNG image which needs to be shown in each frame
	$duration 		= the total time for the animation in seconds
	$playCount		= the way the animation is played (linear, infinite, inout)

	** requires auto-prefixer to support all modern browsers
	** Requires 'compass/css3' */
/* example use */
.animatedImage {
  animation: YES_WE_CAN 1s 2 forwards;
  /* places the keyframes animation outside of the selector */
  background-image: url("http://www.maxhenchman.co.uk/random/123test.png");
  background-repeat: no-repeat;
  background-color: #FF0000;
  display: block;
  width: 100px;
  height: 100px;
  overflow: hidden;
  margin: 20px auto; }

@keyframes YES_WE_CAN {
  0% {
    background-position: 0 0; }
  20% {
    background-position: -0px 0; }
  20.0001% {
    background-position: -100px 0; }
  40% {
    background-position: -100px 0; }
  40.0001% {
    background-position: -200px 0; }
  60% {
    background-position: -200px 0; }
  60.0001% {
    background-position: -300px 0; }
  80% {
    background-position: -300px 0; }
  80.0001% {
    background-position: -400px 0; }
  100% {
    background-position: -400px 0; } }

/**
 * Mixin to maintain aspect ratio on images.

 * Usage:
 * .hero__image  {
 *   @include aspect-ratio(3, 4);
 * }
 */
/**
 * 1. How many layers of shadow
 * 2. Size of the shadow
 * 3. Vertical offset
 * 4. Opacity of the shadow
 */
@keyframes opacityOut {
  0% {
    opacity: 1; }
  100% {
    opacity: 0; } }

.centred {
  text-align: center; }

.no-margin {
  margin: 0; }

.alert:first-of-type {
  margin-top: 1rem; }

.btn {
  -webkit-appearance: none;
     -moz-appearance: none;
          appearance: none; }

.input-group-both {
  margin-left: -1px; }

*, *::before, *::after {
  box-sizing: border-box; }

ul {
  list-style: none; }

@media screen and (max-width: 767px) {
  .main {
    padding-bottom: 74px; } }

@media screen and (max-width: 767px) {
  .addmatch__submit {
    width: 100%; } }

.header {
  position: -webkit-sticky;
  position: sticky;
  top: 0;
  background: #111111;
  z-index: 1; }
  .header__logo-container {
    padding-top: 0.5rem;
    padding-bottom: 0.5rem;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: center;
        align-items: center; }
    @media screen and (max-width: 767px) {
      .header__logo-container {
        -ms-flex-pack: center;
            justify-content: center; } }
  .header__logo-img {
    height: 3rem; }

.main-nav {
  -ms-flex-positive: 1;
      flex-grow: 1; }
  @media screen and (max-width: 767px) {
    .main-nav {
      box-shadow: 0 0px 2px rgba(0, 0, 0, 0.05), 0 0px 4px rgba(0, 0, 0, 0.05), 0 0px 8px rgba(0, 0, 0, 0.05), 0 0px 16px rgba(0, 0, 0, 0.05);
      position: fixed;
      bottom: 0;
      left: 0;
      right: 0;
      background-color: #F5F5F5;
      z-index: 100; } }
  .main-nav__list {
    display: -ms-flexbox;
    display: flex;
    margin: 0;
    padding: 0; }
    @media screen and (min-width: 768px) {
      .main-nav__list {
        margin-left: 2rem; } }
  .main-nav__item {
    display: -ms-flexbox;
    display: flex; }
    .main-nav__item.main-nav__item--login, .main-nav__item.main-nav__item--new {
      margin-left: auto; }
    @media screen and (max-width: 767px) {
      .main-nav__item {
        -ms-flex: 1 0 25%;
            flex: 1 0 25%; }
        .main-nav__item.main-nav__item--history {
          -ms-flex-order: 1;
              order: 1; }
        .main-nav__item.main-nav__item--logout {
          display: none; } }
    @media screen and (min-width: 768px) {
      .main-nav__item:not(:last-of-type) {
        margin-right: 1rem; } }
  .main-nav__link {
    padding-right: 1rem;
    padding-left: 1rem;
    display: -ms-flexbox;
    display: flex;
    -ms-flex-align: center;
        align-items: center; }
    .main-nav__link:not(.btn) {
      color: #111111; }
      @media screen and (min-width: 768px) {
        .main-nav__link:not(.btn) {
          color: #FFFFFF; } }
      .main-nav__link:not(.btn):hover {
        color: #f39c12;
        text-decoration: none; }
    @media screen and (max-width: 767px) {
      .main-nav__link {
        -ms-flex-direction: column;
            flex-direction: column;
        -ms-flex-positive: 1;
            flex-grow: 1;
        padding: 1rem .5rem;
        text-align: center;
        border-radius: 0; } }
  .main-nav__icon {
    font-size: 1.5em; }
    @media screen and (min-width: 768px) {
      .main-nav__icon {
        display: none; } }
  @media screen and (max-width: 767px) {
    .main-nav__text {
      font-size: .8em;
      margin-top: 5px; } }

.table {
  table-layout: fixed;
  margin-bottom: 0; }
  .table td,
  .table th {
    vertical-align: middle;
    padding: 0.5rem;
    border-top: 0; }
  .table .heading {
    text-transform: uppercase;
    position: -webkit-sticky;
    position: sticky;
    top: 64px;
    z-index: 1;
    border: 0; }
  .table .center-col {
    text-align: center; }
  .table .left-col {
    text-align: left; }
  .table .right-col {
    text-align: right; }
  .table .unranked {
    opacity: 0.3; }
  .table .history__col {
    position: relative; }
    .table .history__col .remove-match {
      display: block;
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      width: 2rem;
      color: white;
      background-color: #E74C3C;
      border: 0;
      outline: none; }
      .table .history__col .remove-match:hover {
        background-color: #ea6253; }
      .table .history__col .remove-match i {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%); }
  .table .history__col--deletable {
    padding-right: 40px; }

.leaderboard__rank[data-rank] {
  font-size: 1.2em; }

.leaderboard__rank[data-rank='1'] {
  color: #C9B037; }

.leaderboard__rank[data-rank='2'] {
  color: #B4B4B4; }

.leaderboard__rank[data-rank='3'] {
  color: #AD8A56; }

@media screen and (max-width: 767px) and (orientation: portrait) {
  .table td,
  .table th {
    font-size: .8em; }
  .mobile-hide {
    display: none; }
  .leaderboard-heading__win-percent {
    width: 20%; } }

@media screen and (min-width: 768px), (orientation: landscape) {
  .desktop-hide {
    display: none; }
  .table td,
  .table th {
    padding: 0.65rem 0.75rem; } }

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
